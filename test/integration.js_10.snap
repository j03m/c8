// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`c8 /* c8 ignore next */ ignores lines with special comment 1`] = `
",covered
covered
,"
`;

exports[`c8 --all reports coverage for unloaded js files as 0 for line, branch and function 1`] = `
",zero
positive
negative
,"
`;

exports[`c8 --all reports coverage for unloaded transpiled ts files as 0 for line, branch and function 1`] = `
",zero
positive
negative
,"
`;

exports[`c8 --all reports coverage for unloaded ts files as 0 for line, branch and function when using ts-node 1`] = `
",zero
positive
negative
,"
`;

exports[`c8 --all should allow for --all to be used in conjunction with --check-coverage 1`] = `
",zero
positive
negative
,"
`;

exports[`c8 --all should allow for --all to be used with the check-coverage command (2 invocations) 1`] = `
",,(node:17653) UnhandledPromiseRejectionWarning: Error: ENOENT: no such file or directory, scandir 'tmp/all-check-coverage-as-command'
    at fs.readdirSync (fs.js:861:3)
    at Report._loadReports (/Users/jmordetsky/c8/lib/report.js:211:19)
    at Report._getMergedProcessCov (/Users/jmordetsky/c8/lib/report.js:148:37)
    at Report.getCoverageMapFromAllCoverageFiles (/Users/jmordetsky/c8/lib/report.js:66:31)
    at Object.exports.checkCoverages (/Users/jmordetsky/c8/lib/commands/check-coverage.js:36:28)
    at Object.exports.handler (/Users/jmordetsky/c8/lib/commands/check-coverage.js:26:11)
    at Object.runCommand (/Users/jmordetsky/c8/node_modules/yargs/lib/command.js:240:40)
    at Object.parseArgs [as _parseArgs] (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:1154:41)
    at Object.parse (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:627:25)
    at run (/Users/jmordetsky/c8/bin/c8.js:22:29)
(node:17653) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:17653) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
"
`;

exports[`c8 ESM Modules collects coverage for ESM modules 1`] = `
",----------|---------|----------|---------|---------|-------------------
File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------|---------|----------|---------|---------|-------------------
All files |       0 |        0 |       0 |       0 |                   
----------|---------|----------|---------|---------|-------------------
,Error [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension: /Users/bencoe/oss/c8/test/fixtures/export.cjs
    at Loader.resolve [as _resolve] (internal/modules/esm/default_resolve.js:93:13)
    at Loader.resolve (internal/modules/esm/loader.js:58:33)
    at Loader.getModuleJob (internal/modules/esm/loader.js:113:40)
    at ModuleWrap.promises.module.link (internal/modules/esm/module_job.js:32:40)
    at link (internal/modules/esm/module_job.js:31:36)
"
`;

exports[`c8 check-coverage allows --check-coverage when executing script 1`] = `
",hey
i am a line of code
what
hey
what
hey
what
hey
--------------------------|---------|----------|---------|---------|--------------------------------
File                      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s              
--------------------------|---------|----------|---------|---------|--------------------------------
All files                 |   75.57 |    60.53 |   66.67 |   75.57 |                                
 bin                      |   78.85 |       60 |   66.67 |   78.85 |                                
  c8.js                   |   78.85 |       60 |   66.67 |   78.85 | 22,27-29,32-33,41-43,50-51     
 lib                      |      81 |     54.9 |   83.33 |      81 |                                
  is-cjs-esm-bridge.js    |      90 |       25 |     100 |      90 | 9                              
  parse-args.js           |    95.8 |    45.45 |     100 |    95.8 | 97-98,106-107,120-121          
  report.js               |   76.14 |    64.52 |   83.33 |   76.14 | ...152,158-189,220-221,249-251 
  source-map-from-file.js |      44 |      100 |       0 |      44 | 10-23                          
 lib/commands             |   43.18 |       75 |   16.67 |   43.18 |                                
  check-coverage.js       |   21.31 |      100 |       0 |   21.31 | 9-11,14-27,30-44,46-61         
  report.js               |   92.59 |    71.43 |      50 |   92.59 | 9-10                           
 test/fixtures            |   83.33 |    85.71 |   66.67 |   83.33 |                                
  async.js                |     100 |      100 |     100 |     100 |                                
  normal.js               |      75 |    66.67 |   33.33 |      75 | 14-16,18-20                    
--------------------------|---------|----------|---------|---------|--------------------------------
,ERROR: Coverage for lines (75.57%) does not meet global threshold (101%)
ERROR: Coverage for branches (60.53%) does not meet global threshold (82%)
ERROR: Coverage for statements (75.57%) does not meet global threshold (96%)
"
`;

exports[`c8 check-coverage allows threshold to be applied on per-file basis 1`] = `
",,ERROR: Coverage for lines (78.85%) does not meet threshold (101%) for bin/c8.js
ERROR: Coverage for branches (60%) does not meet threshold (82%) for bin/c8.js
ERROR: Coverage for statements (78.85%) does not meet threshold (96%) for bin/c8.js
ERROR: Coverage for lines (21.31%) does not meet threshold (101%) for lib/commands/check-coverage.js
ERROR: Coverage for statements (21.31%) does not meet threshold (96%) for lib/commands/check-coverage.js
ERROR: Coverage for lines (92.59%) does not meet threshold (101%) for lib/commands/report.js
ERROR: Coverage for branches (71.43%) does not meet threshold (82%) for lib/commands/report.js
ERROR: Coverage for statements (92.59%) does not meet threshold (96%) for lib/commands/report.js
ERROR: Coverage for lines (90%) does not meet threshold (101%) for lib/is-cjs-esm-bridge.js
ERROR: Coverage for branches (25%) does not meet threshold (82%) for lib/is-cjs-esm-bridge.js
ERROR: Coverage for statements (90%) does not meet threshold (96%) for lib/is-cjs-esm-bridge.js
ERROR: Coverage for lines (95.8%) does not meet threshold (101%) for lib/parse-args.js
ERROR: Coverage for branches (45.45%) does not meet threshold (82%) for lib/parse-args.js
ERROR: Coverage for statements (95.8%) does not meet threshold (96%) for lib/parse-args.js
ERROR: Coverage for lines (76.14%) does not meet threshold (101%) for lib/report.js
ERROR: Coverage for branches (64.52%) does not meet threshold (82%) for lib/report.js
ERROR: Coverage for statements (76.14%) does not meet threshold (96%) for lib/report.js
ERROR: Coverage for lines (44%) does not meet threshold (101%) for lib/source-map-from-file.js
ERROR: Coverage for statements (44%) does not meet threshold (96%) for lib/source-map-from-file.js
ERROR: Coverage for lines (100%) does not meet threshold (101%) for test/fixtures/async.js
ERROR: Coverage for lines (75%) does not meet threshold (101%) for test/fixtures/normal.js
ERROR: Coverage for branches (66.67%) does not meet threshold (82%) for test/fixtures/normal.js
ERROR: Coverage for statements (75%) does not meet threshold (96%) for test/fixtures/normal.js
"
`;

exports[`c8 check-coverage exits with 0 if coverage within threshold 1`] = `
",,(node:17618) UnhandledPromiseRejectionWarning: Error: ENOENT: no such file or directory, scandir 'tmp/check-coverage'
    at fs.readdirSync (fs.js:861:3)
    at Report._loadReports (/Users/jmordetsky/c8/lib/report.js:211:19)
    at Report._getMergedProcessCov (/Users/jmordetsky/c8/lib/report.js:148:37)
    at Report.getCoverageMapFromAllCoverageFiles (/Users/jmordetsky/c8/lib/report.js:66:31)
    at Object.exports.checkCoverages (/Users/jmordetsky/c8/lib/commands/check-coverage.js:36:28)
    at Object.exports.handler (/Users/jmordetsky/c8/lib/commands/check-coverage.js:26:11)
    at Object.runCommand (/Users/jmordetsky/c8/node_modules/yargs/lib/command.js:240:40)
    at Object.parseArgs [as _parseArgs] (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:1154:41)
    at Object.parse (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:627:25)
    at run (/Users/jmordetsky/c8/bin/c8.js:22:29)
(node:17618) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:17618) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
"
`;

exports[`c8 check-coverage exits with 1 if coverage is below threshold 1`] = `
",,ERROR: Coverage for lines (75.57%) does not meet global threshold (101%)
ERROR: Coverage for branches (60.53%) does not meet global threshold (82%)
ERROR: Coverage for statements (75.57%) does not meet global threshold (96%)
"
`;

exports[`c8 cobertura report escapes special characters 1`] = `
"<?xml version=\\"1.0\\" ?>
<!DOCTYPE coverage SYSTEM \\"http://cobertura.sourceforge.net/xml/coverage-04.dtd\\">
<coverage lines-valid=\\"15\\" lines-covered=\\"15\\" line-rate=\\"1\\" branches-valid=\\"4\\" branches-covered=\\"4\\" branch-rate=\\"1\\" timestamp=\\"nnnn\\" complexity=\\"0\\" version=\\"0.1\\">
  <sources>
    <source>/foo/file</source>
  </sources>
  <packages>
    <class name=\\"computed-method.js\\" filename=\\"test/fixtures/computed-method.js\\" line-rate=\\"1\\" branch-rate=\\"1\\">
      <methods>
        <method name=\\"Test\\" hits=\\"1\\" signature=\\"()V\\">
          <lines>
            <line number=\\"2\\" hits=\\"1\\"/>
          </lines>
        </method>
        <method name=\\"run\\" hits=\\"1\\" signature=\\"()V\\">
          <lines>
            <line number=\\"6\\" hits=\\"1\\"/>
          </lines>
        </method>
        <method name=\\"map.&lt;computed&gt;.f\\" hits=\\"1\\" signature=\\"()V\\">
          <lines>
            <line number=\\"8\\" hits=\\"1\\"/>
          </lines>
        </method>
      </methods>
      <lines>
        <line number=\\"1\\" hits=\\"1\\" branch=\\"true\\" condition-coverage=\\"100% (1/1)\\"/>
        <line number=\\"2\\" hits=\\"1\\" branch=\\"true\\" condition-coverage=\\"100% (1/1)\\"/>
        <line number=\\"3\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"4\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"5\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"6\\" hits=\\"1\\" branch=\\"true\\" condition-coverage=\\"100% (1/1)\\"/>
        <line number=\\"7\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"8\\" hits=\\"1\\" branch=\\"true\\" condition-coverage=\\"100% (1/1)\\"/>
        <line number=\\"9\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"10\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"11\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"12\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"13\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"14\\" hits=\\"1\\" branch=\\"false\\"/>
        <line number=\\"15\\" hits=\\"1\\" branch=\\"false\\"/>
      </lines>
    </class>
  </packages>
</coverage>
"
`;

exports[`c8 merges reports from subprocesses together 1`] = `
",first

second

,"
`;

exports[`c8 report generates report from existing temporary files 1`] = `
",,c8.js report

read V8 coverage data from temp and output report

Options:
  --help                           Show help                           [boolean]
  --version                        Show version number                 [boolean]
  --reporter, -r                   coverage reporter(s) to use [default: \\"text\\"]
  --reports-dir, -o, --report-dir  directory where coverage reports will be
                                   output to             [default: \\"./coverage\\"]
  --exclude, -x                    a list of specific files and directories that
                                   should be excluded from coverage (glob
                                   patterns are supported)
  [default: [\\"coverage/**\\",\\"packages/*/test{,s}/**\\",\\"**/*.d.ts\\",\\"test{,s}/**\\",\\"t
  est{,-*}.{js,cjs,mjs,ts}\\",\\"**/*{.,-}test.{js,cjs,mjs,ts}\\",\\"**/__tests__/**\\",\\"*
  */{ava,nyc}.config.{js,cjs,mjs}\\",\\"**/jest.config.{js,cjs,mjs,ts}\\",\\"**/{karma,r
     ollup,webpack}.config.js\\",\\"**/{babel.config,.eslintrc,.mocharc}.{js,cjs}\\"]]
  --include, -n                    a list of specific files that should be
                                   covered (glob patterns are supported)
                                                                   [default: []]
  --check-coverage                 check whether coverage is within thresholds
                                   provided           [boolean] [default: false]
  --branches                       what % of branches must be covered?
                                                           [number] [default: 0]
  --functions                      what % of functions must be covered?
                                                           [number] [default: 0]
  --lines                          what % of lines must be covered?
                                                          [number] [default: 90]
  --statements                     what % of statements must be covered?
                                                           [number] [default: 0]
  --per-file                       check thresholds per file
                                                      [boolean] [default: false]
  --temp-directory                 directory V8 coverage data is written to and
                                   read from
  --resolve                        resolve paths to alternate base directory
                                                                   [default: \\"\\"]
  --wrapper-length                 how many bytes is the wrapper prefix on
                                   executed JavaScript                  [number]
  --omit-relative                  omit any paths that are not absolute, e.g.,
                                   internal/net.js     [boolean] [default: true]
  --clean                          should temp files be deleted before script
                                   execution           [boolean] [default: true]
  --all                            supplying --all will cause c8 to consider all
                                   src files in the current working directory
                                   when the determining coverage. Respects
                                   include/exclude.   [boolean] [default: false]

{ Error: ENOENT: no such file or directory, scandir 'tmp/report'
    at fs.readdirSync (fs.js:861:3)
    at Report._loadReports (/Users/jmordetsky/c8/lib/report.js:211:19)
    at Report._getMergedProcessCov (/Users/jmordetsky/c8/lib/report.js:148:37)
    at Report.getCoverageMapFromAllCoverageFiles (/Users/jmordetsky/c8/lib/report.js:66:31)
    at Report.run (/Users/jmordetsky/c8/lib/report.js:46:31)
    at Object.exports.outputReport (/Users/jmordetsky/c8/lib/commands/report.js:25:16)
    at Object.exports.handler (/Users/jmordetsky/c8/lib/commands/report.js:9:17)
    at Object.runCommand (/Users/jmordetsky/c8/node_modules/yargs/lib/command.js:240:40)
    at Object.parseArgs [as _parseArgs] (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:1154:41)
    at Object.parse (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:627:25)
  errno: -2,
  syscall: 'scandir',
  code: 'ENOENT',
  path: 'tmp/report' }
"
`;

exports[`c8 report supports --check-coverage, when generating reports 1`] = `
",,c8.js report

read V8 coverage data from temp and output report

Options:
  --help                           Show help                           [boolean]
  --version                        Show version number                 [boolean]
  --reporter, -r                   coverage reporter(s) to use [default: \\"text\\"]
  --reports-dir, -o, --report-dir  directory where coverage reports will be
                                   output to             [default: \\"./coverage\\"]
  --exclude, -x                    a list of specific files and directories that
                                   should be excluded from coverage (glob
                                   patterns are supported)
  [default: [\\"coverage/**\\",\\"packages/*/test{,s}/**\\",\\"**/*.d.ts\\",\\"test{,s}/**\\",\\"t
  est{,-*}.{js,cjs,mjs,ts}\\",\\"**/*{.,-}test.{js,cjs,mjs,ts}\\",\\"**/__tests__/**\\",\\"*
  */{ava,nyc}.config.{js,cjs,mjs}\\",\\"**/jest.config.{js,cjs,mjs,ts}\\",\\"**/{karma,r
     ollup,webpack}.config.js\\",\\"**/{babel.config,.eslintrc,.mocharc}.{js,cjs}\\"]]
  --include, -n                    a list of specific files that should be
                                   covered (glob patterns are supported)
                                                                   [default: []]
  --check-coverage                 check whether coverage is within thresholds
                                   provided           [boolean] [default: false]
  --branches                       what % of branches must be covered?
                                                           [number] [default: 0]
  --functions                      what % of functions must be covered?
                                                           [number] [default: 0]
  --lines                          what % of lines must be covered?
                                                          [number] [default: 90]
  --statements                     what % of statements must be covered?
                                                           [number] [default: 0]
  --per-file                       check thresholds per file
                                                      [boolean] [default: false]
  --temp-directory                 directory V8 coverage data is written to and
                                   read from
  --resolve                        resolve paths to alternate base directory
                                                                   [default: \\"\\"]
  --wrapper-length                 how many bytes is the wrapper prefix on
                                   executed JavaScript                  [number]
  --omit-relative                  omit any paths that are not absolute, e.g.,
                                   internal/net.js     [boolean] [default: true]
  --clean                          should temp files be deleted before script
                                   execution           [boolean] [default: true]
  --all                            supplying --all will cause c8 to consider all
                                   src files in the current working directory
                                   when the determining coverage. Respects
                                   include/exclude.   [boolean] [default: false]

{ Error: ENOENT: no such file or directory, scandir 'tmp/report'
    at fs.readdirSync (fs.js:861:3)
    at Report._loadReports (/Users/jmordetsky/c8/lib/report.js:211:19)
    at Report._getMergedProcessCov (/Users/jmordetsky/c8/lib/report.js:148:37)
    at Report.getCoverageMapFromAllCoverageFiles (/Users/jmordetsky/c8/lib/report.js:66:31)
    at Report.run (/Users/jmordetsky/c8/lib/report.js:46:31)
    at Object.exports.outputReport (/Users/jmordetsky/c8/lib/commands/report.js:25:16)
    at Object.exports.handler (/Users/jmordetsky/c8/lib/commands/report.js:9:17)
    at Object.runCommand (/Users/jmordetsky/c8/node_modules/yargs/lib/command.js:240:40)
    at Object.parseArgs [as _parseArgs] (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:1154:41)
    at Object.parse (/Users/jmordetsky/c8/node_modules/yargs/yargs.js:627:25)
  errno: -2,
  syscall: 'scandir',
  code: 'ENOENT',
  path: 'tmp/report' }
"
`;

exports[`c8 reports coverage for script that exits normally 1`] = `
",hey
i am a line of code
what
hey
what
hey
what
hey
,"
`;

exports[`c8 source-maps TypeScript remaps branches 1`] = `
",reachable
a = true
a = false
,"
`;

exports[`c8 source-maps TypeScript remaps classes 1`] = `
",covered
covered
covered
covered
covered
,"
`;

exports[`c8 source-maps UglifyJS remaps branches 1`] = `
",reachable
a = true
a = false
,"
`;

exports[`c8 source-maps UglifyJS remaps classes 1`] = `
",covered
covered
covered
covered
covered
,"
`;

exports[`c8 source-maps nyc remaps branches 1`] = `
",reachable
a = true
a = false
,"
`;

exports[`c8 source-maps nyc remaps classes 1`] = `
",covered
covered
covered
covered
covered
,"
`;

exports[`c8 supports exeternally set NODE_V8_COVERAGE 1`] = `
",hey
i am a line of code
what
hey
what
hey
what
hey
-----------|---------|----------|---------|---------|-------------------
File       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
-----------|---------|----------|---------|---------|-------------------
All files  |   83.33 |    85.71 |   66.67 |   83.33 |                   
 async.js  |     100 |      100 |     100 |     100 |                   
 normal.js |      75 |    66.67 |   33.33 |      75 | 14-16,18-20       
-----------|---------|----------|---------|---------|-------------------
,"
`;

exports[`c8 ts-node reads source-map from cache, and applies to coverage 1`] = `
",covered
covered
covered
covered
covered
,"
`;
